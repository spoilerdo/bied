// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: research.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

public static partial class ResearchService
{
  static readonly string __ServiceName = "ResearchService";

  static readonly grpc::Marshaller<global::GetResearchesRequest> __Marshaller_GetResearchesRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GetResearchesRequest.Parser.ParseFrom);
  static readonly grpc::Marshaller<global::Researches> __Marshaller_Researches = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Researches.Parser.ParseFrom);
  static readonly grpc::Marshaller<global::ResearchIdRequest> __Marshaller_ResearchIdRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::ResearchIdRequest.Parser.ParseFrom);
  static readonly grpc::Marshaller<global::Research> __Marshaller_Research = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Research.Parser.ParseFrom);
  static readonly grpc::Marshaller<global::ResearchCreateRequest> __Marshaller_ResearchCreateRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::ResearchCreateRequest.Parser.ParseFrom);
  static readonly grpc::Marshaller<global::ResearchEditRequest> __Marshaller_ResearchEditRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::ResearchEditRequest.Parser.ParseFrom);
  static readonly grpc::Marshaller<global::ResearchEmptyResponse> __Marshaller_ResearchEmptyResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::ResearchEmptyResponse.Parser.ParseFrom);
  static readonly grpc::Marshaller<global::Datasource> __Marshaller_Datasource = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Datasource.Parser.ParseFrom);
  static readonly grpc::Marshaller<global::DatasourceIdRequest> __Marshaller_DatasourceIdRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::DatasourceIdRequest.Parser.ParseFrom);
  static readonly grpc::Marshaller<global::EmailRequests> __Marshaller_EmailRequests = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::EmailRequests.Parser.ParseFrom);
  static readonly grpc::Marshaller<global::EmailEmptyResponse> __Marshaller_EmailEmptyResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::EmailEmptyResponse.Parser.ParseFrom);

  static readonly grpc::Method<global::GetResearchesRequest, global::Researches> __Method_GetResearches = new grpc::Method<global::GetResearchesRequest, global::Researches>(
      grpc::MethodType.Unary,
      __ServiceName,
      "GetResearches",
      __Marshaller_GetResearchesRequest,
      __Marshaller_Researches);

  static readonly grpc::Method<global::ResearchIdRequest, global::Research> __Method_GetResearch = new grpc::Method<global::ResearchIdRequest, global::Research>(
      grpc::MethodType.Unary,
      __ServiceName,
      "GetResearch",
      __Marshaller_ResearchIdRequest,
      __Marshaller_Research);

  static readonly grpc::Method<global::ResearchCreateRequest, global::Research> __Method_CreateResearch = new grpc::Method<global::ResearchCreateRequest, global::Research>(
      grpc::MethodType.Unary,
      __ServiceName,
      "CreateResearch",
      __Marshaller_ResearchCreateRequest,
      __Marshaller_Research);

  static readonly grpc::Method<global::ResearchEditRequest, global::Research> __Method_EditResearch = new grpc::Method<global::ResearchEditRequest, global::Research>(
      grpc::MethodType.Unary,
      __ServiceName,
      "EditResearch",
      __Marshaller_ResearchEditRequest,
      __Marshaller_Research);

  static readonly grpc::Method<global::ResearchIdRequest, global::ResearchEmptyResponse> __Method_DeleteResearch = new grpc::Method<global::ResearchIdRequest, global::ResearchEmptyResponse>(
      grpc::MethodType.Unary,
      __ServiceName,
      "DeleteResearch",
      __Marshaller_ResearchIdRequest,
      __Marshaller_ResearchEmptyResponse);

  static readonly grpc::Method<global::Datasource, global::Research> __Method_AddDatasourceToResearch = new grpc::Method<global::Datasource, global::Research>(
      grpc::MethodType.Unary,
      __ServiceName,
      "AddDatasourceToResearch",
      __Marshaller_Datasource,
      __Marshaller_Research);

  static readonly grpc::Method<global::DatasourceIdRequest, global::Research> __Method_RemoveDatasourceFromResearch = new grpc::Method<global::DatasourceIdRequest, global::Research>(
      grpc::MethodType.Unary,
      __ServiceName,
      "RemoveDatasourceFromResearch",
      __Marshaller_DatasourceIdRequest,
      __Marshaller_Research);

  static readonly grpc::Method<global::EmailRequests, global::EmailEmptyResponse> __Method_InviteUsersToResearch = new grpc::Method<global::EmailRequests, global::EmailEmptyResponse>(
      grpc::MethodType.Unary,
      __ServiceName,
      "InviteUsersToResearch",
      __Marshaller_EmailRequests,
      __Marshaller_EmailEmptyResponse);

  /// <summary>Service descriptor</summary>
  public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
  {
    get { return global::ResearchReflection.Descriptor.Services[0]; }
  }

  /// <summary>Base class for server-side implementations of ResearchService</summary>
  [grpc::BindServiceMethod(typeof(ResearchService), "BindService")]
  public abstract partial class ResearchServiceBase
  {
    public virtual global::System.Threading.Tasks.Task<global::Researches> GetResearches(global::GetResearchesRequest request, grpc::ServerCallContext context)
    {
      throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
    }

    public virtual global::System.Threading.Tasks.Task<global::Research> GetResearch(global::ResearchIdRequest request, grpc::ServerCallContext context)
    {
      throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
    }

    public virtual global::System.Threading.Tasks.Task<global::Research> CreateResearch(global::ResearchCreateRequest request, grpc::ServerCallContext context)
    {
      throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
    }

    public virtual global::System.Threading.Tasks.Task<global::Research> EditResearch(global::ResearchEditRequest request, grpc::ServerCallContext context)
    {
      throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
    }

    public virtual global::System.Threading.Tasks.Task<global::ResearchEmptyResponse> DeleteResearch(global::ResearchIdRequest request, grpc::ServerCallContext context)
    {
      throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
    }

    public virtual global::System.Threading.Tasks.Task<global::Research> AddDatasourceToResearch(global::Datasource request, grpc::ServerCallContext context)
    {
      throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
    }

    public virtual global::System.Threading.Tasks.Task<global::Research> RemoveDatasourceFromResearch(global::DatasourceIdRequest request, grpc::ServerCallContext context)
    {
      throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
    }

    public virtual global::System.Threading.Tasks.Task<global::EmailEmptyResponse> InviteUsersToResearch(global::EmailRequests request, grpc::ServerCallContext context)
    {
      throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
    }

  }

  /// <summary>Client for ResearchService</summary>
  public partial class ResearchServiceClient : grpc::ClientBase<ResearchServiceClient>
  {
    /// <summary>Creates a new client for ResearchService</summary>
    /// <param name="channel">The channel to use to make remote calls.</param>
    public ResearchServiceClient(grpc::ChannelBase channel) : base(channel)
    {
    }
    /// <summary>Creates a new client for ResearchService that uses a custom <c>CallInvoker</c>.</summary>
    /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
    public ResearchServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
    {
    }
    /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
    protected ResearchServiceClient() : base()
    {
    }
    /// <summary>Protected constructor to allow creation of configured clients.</summary>
    /// <param name="configuration">The client configuration.</param>
    protected ResearchServiceClient(ClientBaseConfiguration configuration) : base(configuration)
    {
    }

    public virtual global::Researches GetResearches(global::GetResearchesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return GetResearches(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    public virtual global::Researches GetResearches(global::GetResearchesRequest request, grpc::CallOptions options)
    {
      return CallInvoker.BlockingUnaryCall(__Method_GetResearches, null, options, request);
    }
    public virtual grpc::AsyncUnaryCall<global::Researches> GetResearchesAsync(global::GetResearchesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return GetResearchesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    public virtual grpc::AsyncUnaryCall<global::Researches> GetResearchesAsync(global::GetResearchesRequest request, grpc::CallOptions options)
    {
      return CallInvoker.AsyncUnaryCall(__Method_GetResearches, null, options, request);
    }
    public virtual global::Research GetResearch(global::ResearchIdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return GetResearch(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    public virtual global::Research GetResearch(global::ResearchIdRequest request, grpc::CallOptions options)
    {
      return CallInvoker.BlockingUnaryCall(__Method_GetResearch, null, options, request);
    }
    public virtual grpc::AsyncUnaryCall<global::Research> GetResearchAsync(global::ResearchIdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return GetResearchAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    public virtual grpc::AsyncUnaryCall<global::Research> GetResearchAsync(global::ResearchIdRequest request, grpc::CallOptions options)
    {
      return CallInvoker.AsyncUnaryCall(__Method_GetResearch, null, options, request);
    }
    public virtual global::Research CreateResearch(global::ResearchCreateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return CreateResearch(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    public virtual global::Research CreateResearch(global::ResearchCreateRequest request, grpc::CallOptions options)
    {
      return CallInvoker.BlockingUnaryCall(__Method_CreateResearch, null, options, request);
    }
    public virtual grpc::AsyncUnaryCall<global::Research> CreateResearchAsync(global::ResearchCreateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return CreateResearchAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    public virtual grpc::AsyncUnaryCall<global::Research> CreateResearchAsync(global::ResearchCreateRequest request, grpc::CallOptions options)
    {
      return CallInvoker.AsyncUnaryCall(__Method_CreateResearch, null, options, request);
    }
    public virtual global::Research EditResearch(global::ResearchEditRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return EditResearch(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    public virtual global::Research EditResearch(global::ResearchEditRequest request, grpc::CallOptions options)
    {
      return CallInvoker.BlockingUnaryCall(__Method_EditResearch, null, options, request);
    }
    public virtual grpc::AsyncUnaryCall<global::Research> EditResearchAsync(global::ResearchEditRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return EditResearchAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    public virtual grpc::AsyncUnaryCall<global::Research> EditResearchAsync(global::ResearchEditRequest request, grpc::CallOptions options)
    {
      return CallInvoker.AsyncUnaryCall(__Method_EditResearch, null, options, request);
    }
    public virtual global::ResearchEmptyResponse DeleteResearch(global::ResearchIdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return DeleteResearch(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    public virtual global::ResearchEmptyResponse DeleteResearch(global::ResearchIdRequest request, grpc::CallOptions options)
    {
      return CallInvoker.BlockingUnaryCall(__Method_DeleteResearch, null, options, request);
    }
    public virtual grpc::AsyncUnaryCall<global::ResearchEmptyResponse> DeleteResearchAsync(global::ResearchIdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return DeleteResearchAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    public virtual grpc::AsyncUnaryCall<global::ResearchEmptyResponse> DeleteResearchAsync(global::ResearchIdRequest request, grpc::CallOptions options)
    {
      return CallInvoker.AsyncUnaryCall(__Method_DeleteResearch, null, options, request);
    }
    public virtual global::Research AddDatasourceToResearch(global::Datasource request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return AddDatasourceToResearch(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    public virtual global::Research AddDatasourceToResearch(global::Datasource request, grpc::CallOptions options)
    {
      return CallInvoker.BlockingUnaryCall(__Method_AddDatasourceToResearch, null, options, request);
    }
    public virtual grpc::AsyncUnaryCall<global::Research> AddDatasourceToResearchAsync(global::Datasource request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return AddDatasourceToResearchAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    public virtual grpc::AsyncUnaryCall<global::Research> AddDatasourceToResearchAsync(global::Datasource request, grpc::CallOptions options)
    {
      return CallInvoker.AsyncUnaryCall(__Method_AddDatasourceToResearch, null, options, request);
    }
    public virtual global::Research RemoveDatasourceFromResearch(global::DatasourceIdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return RemoveDatasourceFromResearch(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    public virtual global::Research RemoveDatasourceFromResearch(global::DatasourceIdRequest request, grpc::CallOptions options)
    {
      return CallInvoker.BlockingUnaryCall(__Method_RemoveDatasourceFromResearch, null, options, request);
    }
    public virtual grpc::AsyncUnaryCall<global::Research> RemoveDatasourceFromResearchAsync(global::DatasourceIdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return RemoveDatasourceFromResearchAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    public virtual grpc::AsyncUnaryCall<global::Research> RemoveDatasourceFromResearchAsync(global::DatasourceIdRequest request, grpc::CallOptions options)
    {
      return CallInvoker.AsyncUnaryCall(__Method_RemoveDatasourceFromResearch, null, options, request);
    }
    public virtual global::EmailEmptyResponse InviteUsersToResearch(global::EmailRequests request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return InviteUsersToResearch(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    public virtual global::EmailEmptyResponse InviteUsersToResearch(global::EmailRequests request, grpc::CallOptions options)
    {
      return CallInvoker.BlockingUnaryCall(__Method_InviteUsersToResearch, null, options, request);
    }
    public virtual grpc::AsyncUnaryCall<global::EmailEmptyResponse> InviteUsersToResearchAsync(global::EmailRequests request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return InviteUsersToResearchAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    public virtual grpc::AsyncUnaryCall<global::EmailEmptyResponse> InviteUsersToResearchAsync(global::EmailRequests request, grpc::CallOptions options)
    {
      return CallInvoker.AsyncUnaryCall(__Method_InviteUsersToResearch, null, options, request);
    }
    /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
    protected override ResearchServiceClient NewInstance(ClientBaseConfiguration configuration)
    {
      return new ResearchServiceClient(configuration);
    }
  }

  /// <summary>Creates service definition that can be registered with a server</summary>
  /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
  public static grpc::ServerServiceDefinition BindService(ResearchServiceBase serviceImpl)
  {
    return grpc::ServerServiceDefinition.CreateBuilder()
        .AddMethod(__Method_GetResearches, serviceImpl.GetResearches)
        .AddMethod(__Method_GetResearch, serviceImpl.GetResearch)
        .AddMethod(__Method_CreateResearch, serviceImpl.CreateResearch)
        .AddMethod(__Method_EditResearch, serviceImpl.EditResearch)
        .AddMethod(__Method_DeleteResearch, serviceImpl.DeleteResearch)
        .AddMethod(__Method_AddDatasourceToResearch, serviceImpl.AddDatasourceToResearch)
        .AddMethod(__Method_RemoveDatasourceFromResearch, serviceImpl.RemoveDatasourceFromResearch)
        .AddMethod(__Method_InviteUsersToResearch, serviceImpl.InviteUsersToResearch).Build();
  }

  /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
  /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
  /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
  /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
  public static void BindService(grpc::ServiceBinderBase serviceBinder, ResearchServiceBase serviceImpl)
  {
    serviceBinder.AddMethod(__Method_GetResearches, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::GetResearchesRequest, global::Researches>(serviceImpl.GetResearches));
    serviceBinder.AddMethod(__Method_GetResearch, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::ResearchIdRequest, global::Research>(serviceImpl.GetResearch));
    serviceBinder.AddMethod(__Method_CreateResearch, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::ResearchCreateRequest, global::Research>(serviceImpl.CreateResearch));
    serviceBinder.AddMethod(__Method_EditResearch, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::ResearchEditRequest, global::Research>(serviceImpl.EditResearch));
    serviceBinder.AddMethod(__Method_DeleteResearch, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::ResearchIdRequest, global::ResearchEmptyResponse>(serviceImpl.DeleteResearch));
    serviceBinder.AddMethod(__Method_AddDatasourceToResearch, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Datasource, global::Research>(serviceImpl.AddDatasourceToResearch));
    serviceBinder.AddMethod(__Method_RemoveDatasourceFromResearch, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::DatasourceIdRequest, global::Research>(serviceImpl.RemoveDatasourceFromResearch));
    serviceBinder.AddMethod(__Method_InviteUsersToResearch, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::EmailRequests, global::EmailEmptyResponse>(serviceImpl.InviteUsersToResearch));
  }

}
#endregion
