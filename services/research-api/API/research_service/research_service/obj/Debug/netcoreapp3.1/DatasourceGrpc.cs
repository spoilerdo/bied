// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: datasource.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

public static partial class DatasourceService
{
  static readonly string __ServiceName = "DatasourceService";

  static readonly grpc::Marshaller<global::GetDatasourcesRequest> __Marshaller_GetDatasourcesRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GetDatasourcesRequest.Parser.ParseFrom);
  static readonly grpc::Marshaller<global::Datasources> __Marshaller_Datasources = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Datasources.Parser.ParseFrom);
  static readonly grpc::Marshaller<global::DatasourceIdRequest> __Marshaller_DatasourceIdRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::DatasourceIdRequest.Parser.ParseFrom);
  static readonly grpc::Marshaller<global::Datasource> __Marshaller_Datasource = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Datasource.Parser.ParseFrom);
  static readonly grpc::Marshaller<global::DatasourceRequest> __Marshaller_DatasourceRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::DatasourceRequest.Parser.ParseFrom);
  static readonly grpc::Marshaller<global::DatasourceEditRequest> __Marshaller_DatasourceEditRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::DatasourceEditRequest.Parser.ParseFrom);

  static readonly grpc::Method<global::GetDatasourcesRequest, global::Datasources> __Method_GetDatasources = new grpc::Method<global::GetDatasourcesRequest, global::Datasources>(
      grpc::MethodType.Unary,
      __ServiceName,
      "GetDatasources",
      __Marshaller_GetDatasourcesRequest,
      __Marshaller_Datasources);

  static readonly grpc::Method<global::DatasourceIdRequest, global::Datasource> __Method_GetDatasource = new grpc::Method<global::DatasourceIdRequest, global::Datasource>(
      grpc::MethodType.Unary,
      __ServiceName,
      "GetDatasource",
      __Marshaller_DatasourceIdRequest,
      __Marshaller_Datasource);

  static readonly grpc::Method<global::DatasourceRequest, global::Datasource> __Method_CreateDatasource = new grpc::Method<global::DatasourceRequest, global::Datasource>(
      grpc::MethodType.Unary,
      __ServiceName,
      "CreateDatasource",
      __Marshaller_DatasourceRequest,
      __Marshaller_Datasource);

  static readonly grpc::Method<global::DatasourceEditRequest, global::Datasource> __Method_EditDatasource = new grpc::Method<global::DatasourceEditRequest, global::Datasource>(
      grpc::MethodType.Unary,
      __ServiceName,
      "EditDatasource",
      __Marshaller_DatasourceEditRequest,
      __Marshaller_Datasource);

  static readonly grpc::Method<global::DatasourceIdRequest, global::Datasource> __Method_DeleteDatasource = new grpc::Method<global::DatasourceIdRequest, global::Datasource>(
      grpc::MethodType.Unary,
      __ServiceName,
      "DeleteDatasource",
      __Marshaller_DatasourceIdRequest,
      __Marshaller_Datasource);

  /// <summary>Service descriptor</summary>
  public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
  {
    get { return global::DatasourceReflection.Descriptor.Services[0]; }
  }

  /// <summary>Base class for server-side implementations of DatasourceService</summary>
  [grpc::BindServiceMethod(typeof(DatasourceService), "BindService")]
  public abstract partial class DatasourceServiceBase
  {
    public virtual global::System.Threading.Tasks.Task<global::Datasources> GetDatasources(global::GetDatasourcesRequest request, grpc::ServerCallContext context)
    {
      throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
    }

    public virtual global::System.Threading.Tasks.Task<global::Datasource> GetDatasource(global::DatasourceIdRequest request, grpc::ServerCallContext context)
    {
      throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
    }

    public virtual global::System.Threading.Tasks.Task<global::Datasource> CreateDatasource(global::DatasourceRequest request, grpc::ServerCallContext context)
    {
      throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
    }

    public virtual global::System.Threading.Tasks.Task<global::Datasource> EditDatasource(global::DatasourceEditRequest request, grpc::ServerCallContext context)
    {
      throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
    }

    public virtual global::System.Threading.Tasks.Task<global::Datasource> DeleteDatasource(global::DatasourceIdRequest request, grpc::ServerCallContext context)
    {
      throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
    }

  }

  /// <summary>Client for DatasourceService</summary>
  public partial class DatasourceServiceClient : grpc::ClientBase<DatasourceServiceClient>
  {
    /// <summary>Creates a new client for DatasourceService</summary>
    /// <param name="channel">The channel to use to make remote calls.</param>
    public DatasourceServiceClient(grpc::ChannelBase channel) : base(channel)
    {
    }
    /// <summary>Creates a new client for DatasourceService that uses a custom <c>CallInvoker</c>.</summary>
    /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
    public DatasourceServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
    {
    }
    /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
    protected DatasourceServiceClient() : base()
    {
    }
    /// <summary>Protected constructor to allow creation of configured clients.</summary>
    /// <param name="configuration">The client configuration.</param>
    protected DatasourceServiceClient(ClientBaseConfiguration configuration) : base(configuration)
    {
    }

    public virtual global::Datasources GetDatasources(global::GetDatasourcesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return GetDatasources(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    public virtual global::Datasources GetDatasources(global::GetDatasourcesRequest request, grpc::CallOptions options)
    {
      return CallInvoker.BlockingUnaryCall(__Method_GetDatasources, null, options, request);
    }
    public virtual grpc::AsyncUnaryCall<global::Datasources> GetDatasourcesAsync(global::GetDatasourcesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return GetDatasourcesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    public virtual grpc::AsyncUnaryCall<global::Datasources> GetDatasourcesAsync(global::GetDatasourcesRequest request, grpc::CallOptions options)
    {
      return CallInvoker.AsyncUnaryCall(__Method_GetDatasources, null, options, request);
    }
    public virtual global::Datasource GetDatasource(global::DatasourceIdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return GetDatasource(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    public virtual global::Datasource GetDatasource(global::DatasourceIdRequest request, grpc::CallOptions options)
    {
      return CallInvoker.BlockingUnaryCall(__Method_GetDatasource, null, options, request);
    }
    public virtual grpc::AsyncUnaryCall<global::Datasource> GetDatasourceAsync(global::DatasourceIdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return GetDatasourceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    public virtual grpc::AsyncUnaryCall<global::Datasource> GetDatasourceAsync(global::DatasourceIdRequest request, grpc::CallOptions options)
    {
      return CallInvoker.AsyncUnaryCall(__Method_GetDatasource, null, options, request);
    }
    public virtual global::Datasource CreateDatasource(global::DatasourceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return CreateDatasource(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    public virtual global::Datasource CreateDatasource(global::DatasourceRequest request, grpc::CallOptions options)
    {
      return CallInvoker.BlockingUnaryCall(__Method_CreateDatasource, null, options, request);
    }
    public virtual grpc::AsyncUnaryCall<global::Datasource> CreateDatasourceAsync(global::DatasourceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return CreateDatasourceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    public virtual grpc::AsyncUnaryCall<global::Datasource> CreateDatasourceAsync(global::DatasourceRequest request, grpc::CallOptions options)
    {
      return CallInvoker.AsyncUnaryCall(__Method_CreateDatasource, null, options, request);
    }
    public virtual global::Datasource EditDatasource(global::DatasourceEditRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return EditDatasource(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    public virtual global::Datasource EditDatasource(global::DatasourceEditRequest request, grpc::CallOptions options)
    {
      return CallInvoker.BlockingUnaryCall(__Method_EditDatasource, null, options, request);
    }
    public virtual grpc::AsyncUnaryCall<global::Datasource> EditDatasourceAsync(global::DatasourceEditRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return EditDatasourceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    public virtual grpc::AsyncUnaryCall<global::Datasource> EditDatasourceAsync(global::DatasourceEditRequest request, grpc::CallOptions options)
    {
      return CallInvoker.AsyncUnaryCall(__Method_EditDatasource, null, options, request);
    }
    public virtual global::Datasource DeleteDatasource(global::DatasourceIdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return DeleteDatasource(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    public virtual global::Datasource DeleteDatasource(global::DatasourceIdRequest request, grpc::CallOptions options)
    {
      return CallInvoker.BlockingUnaryCall(__Method_DeleteDatasource, null, options, request);
    }
    public virtual grpc::AsyncUnaryCall<global::Datasource> DeleteDatasourceAsync(global::DatasourceIdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return DeleteDatasourceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    public virtual grpc::AsyncUnaryCall<global::Datasource> DeleteDatasourceAsync(global::DatasourceIdRequest request, grpc::CallOptions options)
    {
      return CallInvoker.AsyncUnaryCall(__Method_DeleteDatasource, null, options, request);
    }
    /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
    protected override DatasourceServiceClient NewInstance(ClientBaseConfiguration configuration)
    {
      return new DatasourceServiceClient(configuration);
    }
  }

  /// <summary>Creates service definition that can be registered with a server</summary>
  /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
  public static grpc::ServerServiceDefinition BindService(DatasourceServiceBase serviceImpl)
  {
    return grpc::ServerServiceDefinition.CreateBuilder()
        .AddMethod(__Method_GetDatasources, serviceImpl.GetDatasources)
        .AddMethod(__Method_GetDatasource, serviceImpl.GetDatasource)
        .AddMethod(__Method_CreateDatasource, serviceImpl.CreateDatasource)
        .AddMethod(__Method_EditDatasource, serviceImpl.EditDatasource)
        .AddMethod(__Method_DeleteDatasource, serviceImpl.DeleteDatasource).Build();
  }

  /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
  /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
  /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
  /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
  public static void BindService(grpc::ServiceBinderBase serviceBinder, DatasourceServiceBase serviceImpl)
  {
    serviceBinder.AddMethod(__Method_GetDatasources, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::GetDatasourcesRequest, global::Datasources>(serviceImpl.GetDatasources));
    serviceBinder.AddMethod(__Method_GetDatasource, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::DatasourceIdRequest, global::Datasource>(serviceImpl.GetDatasource));
    serviceBinder.AddMethod(__Method_CreateDatasource, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::DatasourceRequest, global::Datasource>(serviceImpl.CreateDatasource));
    serviceBinder.AddMethod(__Method_EditDatasource, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::DatasourceEditRequest, global::Datasource>(serviceImpl.EditDatasource));
    serviceBinder.AddMethod(__Method_DeleteDatasource, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::DatasourceIdRequest, global::Datasource>(serviceImpl.DeleteDatasource));
  }

}
#endregion
